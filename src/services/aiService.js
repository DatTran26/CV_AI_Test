// File validation constants
const SUPPORTED_FILE_TYPES = [
  'application/pdf',
  'text/plain',
  'application/msword',
  'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
];

const MAX_FILE_SIZE = 10 * 1024 * 1024; // 10MB
const MIN_FILE_SIZE = 1024; // 1KB

// Cache for API responses
const responseCache = new Map();

// File validation function
const validateFile = (file) => {
  if (!file) {
    return { valid: false, error: 'Kh√¥ng c√≥ file ƒë∆∞·ª£c ch·ªçn' };
  }
  
  if (file.size < MIN_FILE_SIZE) {
    return { valid: false, error: 'File qu√° nh·ªè. Vui l√≤ng ch·ªçn file c√≥ k√≠ch th∆∞·ªõc √≠t nh·∫•t 1KB' };
  }
  
  if (file.size > MAX_FILE_SIZE) {
    return { valid: false, error: 'File qu√° l·ªõn. Vui l√≤ng ch·ªçn file c√≥ k√≠ch th∆∞·ªõc t·ªëi ƒëa 10MB' };
  }
  
  if (!SUPPORTED_FILE_TYPES.includes(file.type)) {
    return { valid: false, error: 'ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. Vui l√≤ng ch·ªçn file PDF, DOC, DOCX ho·∫∑c TXT' };
  }
  
  return { valid: true };
};

// AI service v·ªõi t√≠ch h·ª£p OpenAI
export const analyzeCV = async (file, selectedIndustry = null, selectedRole = null) => {
  const apiKey = process.env.REACT_APP_OPENAI_API_KEY;
  
  console.log('üîç Starting CV analysis process...');
  console.log('üîç API Key exists:', !!apiKey);
  console.log('üîç Selected Industry:', selectedIndustry?.name || 'Auto');
  console.log('üîç Selected Role:', selectedRole?.name || 'Auto');
  
  // Validate file
  const validationResult = validateFile(file);
  if (!validationResult.valid) {
    throw new Error(validationResult.error);
  }
  
  // Check cache first
  const cacheKey = `${file.name}_${file.size}_${selectedIndustry?.id || 'auto'}_${selectedRole?.id || 'auto'}`;
  if (responseCache.has(cacheKey)) {
    console.log('üìã Using cached response');
    return responseCache.get(cacheKey);
  }
  
  // N·∫øu c√≥ API key, s·ª≠ d·ª•ng AI th·ª±c t·∫ø
  if (apiKey && apiKey !== 'your_openai_api_key_here') {
    try {
      console.log('üöÄ Using AI API for analysis...');
      const result = await analyzeCVWithAIRetry(file, apiKey, selectedIndustry, selectedRole);
      console.log('‚úÖ AI analysis completed successfully');
      
      // Cache the result
      responseCache.set(cacheKey, result);
      
      return result;
    } catch (error) {
      console.error('‚ùå AI API Error:', error);
      console.log('üîÑ Falling back to mock data...');
      
      // Th√™m th√¥ng tin v·ªÅ l·ªói v√†o mock data
      const mockData = await getMockAnalysisData(selectedIndustry, selectedRole);
      return {
        ...mockData,
        analysisSummary: `Ph√¢n t√≠ch b·∫±ng AI th·∫•t b·∫°i (${error.message}). ƒêang s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u.`,
        detailedAnalysis: `Ph√¢n t√≠ch th·ª±c t·∫ø kh√¥ng kh·∫£ d·ª•ng do l·ªói API: ${error.message}. D·ªØ li·ªáu hi·ªÉn th·ªã l√† m·∫´u ƒë·ªÉ demo.`
      };
    }
  }
  
  // N·∫øu kh√¥ng c√≥ API key, s·ª≠ d·ª•ng mock data
  console.log('üìù Using mock data - Please add REACT_APP_OPENAI_API_KEY to .env');
  return await getMockAnalysisData(selectedIndustry, selectedRole);
};

// Mock data function v·ªõi ph√¢n t√≠ch theo chuy√™n ng√†nh
const getMockAnalysisData = async (selectedIndustry = null, selectedRole = null) => {
  // Simulate API delay
  await new Promise(resolve => setTimeout(resolve, 3000));

  // Generate industry-specific analysis
  const industryAnalysis = generateIndustrySpecificAnalysis(selectedIndustry, selectedRole);
  
  // Generate role suggestions if no specific role selected
  const roleSuggestions = selectedRole ? [] : generateRoleSuggestions();
  
  // Mock data v·ªõi n·ªôi dung t·ªët h∆°n
  const mockAnalysisData = {
    overallScore: Math.floor(Math.random() * 30) + 70, // 70-100
    scores: [
      {
        category: "C·∫•u tr√∫c",
        value: Math.floor(Math.random() * 20) + 75,
        description: "B·ªë c·ª•c v√† s·∫Øp x·∫øp th√¥ng tin r√µ r√†ng, logic"
      },
      {
        category: "N·ªôi dung",
        value: Math.floor(Math.random() * 20) + 70,
        description: "Th√¥ng tin ƒë·∫ßy ƒë·ªß v√† t·ª´ kh√≥a ph√π h·ª£p"
      },
      {
        category: "ƒê·ªãnh d·∫°ng",
        value: Math.floor(Math.random() * 20) + 80,
        description: "Tr√¨nh b√†y chuy√™n nghi·ªáp v√† d·ªÖ ƒë·ªçc"
      },
      {
        category: "Chuy√™n nghi·ªáp",
        value: Math.floor(Math.random() * 20) + 75,
        description: "Th·ªÉ hi·ªán t√≠nh chuy√™n nghi·ªáp cao"
      }
    ],
    strengths: [
      {
        title: "Th√¥ng tin li√™n h·ªá r√µ r√†ng",
        description: "CV c√≥ ƒë·∫ßy ƒë·ªß th√¥ng tin li√™n h·ªá v√† d·ªÖ t√¨m th·∫•y"
      },
      {
        title: "Kinh nghi·ªám ƒë∆∞·ª£c m√¥ t·∫£ chi ti·∫øt",
        description: "C√°c v·ªã tr√≠ c√¥ng vi·ªác ƒë∆∞·ª£c m√¥ t·∫£ v·ªõi th√†nh t√≠ch c·ª• th·ªÉ"
      },
      {
        title: "Tr√¨nh ƒë·ªô h·ªçc v·∫•n ph√π h·ª£p",
        description: "B·∫±ng c·∫•p v√† ch·ª©ng ch·ªâ ƒë∆∞·ª£c tr√¨nh b√†y logic"
      }
    ],
    improvements: [
      {
        title: "Thi·∫øu t·ª´ kh√≥a quan tr·ªçng",
        description: "CV c·∫ßn b·ªï sung th√™m t·ª´ kh√≥a li√™n quan ƒë·∫øn v·ªã tr√≠ ·ª©ng tuy·ªÉn",
        suggestion: "Nghi√™n c·ª©u job description v√† th√™m c√°c t·ª´ kh√≥a ph√π h·ª£p"
      },
      {
        title: "Kho·∫£ng tr·ªëng trong l·ªãch s·ª≠ c√¥ng vi·ªác",
        description: "C√≥ kho·∫£ng th·ªùi gian kh√¥ng c√≥ ho·∫°t ƒë·ªông ƒë∆∞·ª£c gi·∫£i th√≠ch",
        suggestion: "Th√™m th√¥ng tin v·ªÅ c√°c ho·∫°t ƒë·ªông trong th·ªùi gian n√†y"
      },
      {
        title: "Thi·∫øu k·ªπ nƒÉng k·ªπ thu·∫≠t",
        description: "CV c·∫ßn b·ªï sung th√™m k·ªπ nƒÉng k·ªπ thu·∫≠t li√™n quan",
        suggestion: "Th√™m section k·ªπ nƒÉng v·ªõi c√°c c√¥ng ngh·ªá v√† c√¥ng c·ª•"
      }
    ],
    detailedAnalysis: `CV c·ªßa b·∫°n th·ªÉ hi·ªán m·ªôt h·ªì s∆° chuy√™n nghi·ªáp v·ªõi kinh nghi·ªám l√†m vi·ªác ƒëa d·∫°ng. Tuy nhi√™n, c√≥ m·ªôt s·ªë ƒëi·ªÉm c·∫ßn c·∫£i thi·ªán ƒë·ªÉ t·ªëi ∆∞u h√≥a c∆° h·ªôi ƒë∆∞·ª£c tuy·ªÉn d·ª•ng.

ƒêI·ªÇM M·∫†NH N·ªîI B·∫¨T:
‚úÖ C·∫•u tr√∫c CV r√µ r√†ng v√† d·ªÖ ƒë·ªçc
‚úÖ Kinh nghi·ªám l√†m vi·ªác ƒë∆∞·ª£c tr√¨nh b√†y theo th·ª© t·ª± th·ªùi gian logic
‚úÖ Th√¥ng tin li√™n h·ªá ƒë·∫ßy ƒë·ªß v√† ch√≠nh x√°c
‚úÖ Tr√¨nh ƒë·ªô h·ªçc v·∫•n ph√π h·ª£p v·ªõi v·ªã tr√≠ ·ª©ng tuy·ªÉn

NH·ªÆNG ƒêI·ªÇM C·∫¶N C·∫¢I THI·ªÜN:
‚ö†Ô∏è C·∫ßn b·ªï sung th√™m t·ª´ kh√≥a li√™n quan ƒë·∫øn v·ªã tr√≠ ·ª©ng tuy·ªÉn
‚ö†Ô∏è M√¥ t·∫£ th√†nh t√≠ch c·∫ßn c·ª• th·ªÉ h∆°n v·ªõi s·ªë li·ªáu
‚ö†Ô∏è Thi·∫øu th√¥ng tin v·ªÅ c√°c d·ª± √°n quan tr·ªçng ƒë√£ tham gia
‚ö†Ô∏è C·∫ßn th√™m k·ªπ nƒÉng m·ªÅm v√† k·ªπ nƒÉng k·ªπ thu·∫≠t

KHUY·∫æN NGH·ªä C·∫¢I THI·ªÜN:
1. T√πy ch·ªânh CV cho t·ª´ng v·ªã tr√≠ ·ª©ng tuy·ªÉn c·ª• th·ªÉ
2. S·ª≠ d·ª•ng c√°c t·ª´ kh√≥a t·ª´ job description
3. Th√™m c√°c th√†nh t√≠ch ƒë∆∞·ª£c ƒëo l∆∞·ªùng b·∫±ng s·ªë li·ªáu c·ª• th·ªÉ
4. B·ªï sung th√¥ng tin v·ªÅ d·ª± √°n v√† th√†nh t·ª±u n·ªïi b·∫≠t
5. C·∫≠p nh·∫≠t k·ªπ nƒÉng v√† ch·ª©ng ch·ªâ m·ªõi nh·∫•t`,
    recommendations: [
      {
        title: "T√πy ch·ªânh CV cho t·ª´ng v·ªã tr√≠",
        description: "ƒêi·ªÅu ch·ªânh n·ªôi dung CV ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa t·ª´ng c√¥ng ty"
      },
      {
        title: "B·ªï sung t·ª´ kh√≥a quan tr·ªçng",
        description: "Nghi√™n c·ª©u v√† th√™m c√°c t·ª´ kh√≥a li√™n quan ƒë·∫øn ng√†nh ngh·ªÅ"
      },
      {
        title: "C·∫£i thi·ªán m√¥ t·∫£ th√†nh t√≠ch",
        description: "S·ª≠ d·ª•ng s·ªë li·ªáu c·ª• th·ªÉ ƒë·ªÉ m√¥ t·∫£ th√†nh t√≠ch"
      },
      {
        title: "Ki·ªÉm tra l·ªói ch√≠nh t·∫£",
        description: "ƒê·ªçc l·∫°i CV nhi·ªÅu l·∫ßn ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng c√≥ l·ªói ch√≠nh t·∫£"
      }
    ]
  };

  return {
    ...mockAnalysisData,
    ...industryAnalysis,
    ...roleSuggestions
  };
};

// Retry logic for API calls
const analyzeCVWithAIRetry = async (file, apiKey, selectedIndustry = null, selectedRole = null, maxRetries = 3) => {
  let lastError;
  
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      console.log(`üîÑ Attempt ${attempt}/${maxRetries}`);
      return await analyzeCVWithAI(file, apiKey, selectedIndustry, selectedRole);
    } catch (error) {
      lastError = error;
      console.warn(`‚ö†Ô∏è Attempt ${attempt} failed:`, error.message);
      
      if (attempt < maxRetries) {
        const delay = Math.pow(2, attempt) * 1000; // Exponential backoff
        console.log(`‚è≥ Waiting ${delay}ms before retry...`);
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
  }
  
  throw lastError;
};

// H√†m th·ª±c t·∫ø ƒë·ªÉ t√≠ch h·ª£p v·ªõi AI API (OpenAI)
export const analyzeCVWithAI = async (file, apiKey, selectedIndustry = null, selectedRole = null) => {
  try {
    console.log('üìÅ Starting CV analysis...');
    console.log('üìÅ File name:', file.name);
    console.log('üìÅ File size:', file.size);
    console.log('üìÅ File type:', file.type);
    
    // Import OpenAI SDK dynamically
    const { default: OpenAI } = await import('openai');
    
    // Initialize OpenAI client
    const client = new OpenAI({
      apiKey: apiKey,
      dangerouslyAllowBrowser: true // Required for browser environment
    });
    
    console.log('üì§ Processing file content...');
    console.log('üìä Processing progress: 0%');
    
    // Read file content
    let fileContent;
    try {
      fileContent = await readFileContent(file);
      console.log('‚úÖ File content read successfully');
      console.log('üìä Processing progress: 50%');
    } catch (fileError) {
      console.error('‚ùå File read error:', fileError);
      throw new Error('Kh√¥ng th·ªÉ ƒë·ªçc ƒë∆∞·ª£c n·ªôi dung file CV. Vui l√≤ng ki·ªÉm tra file v√† th·ª≠ l·∫°i.');
    }
    
    // Truncate content ƒë·ªÉ tr√°nh rate limit
    let truncatedContent = fileContent;
    const MAX_CONTENT_LENGTH = 50000;
    if (fileContent.length > MAX_CONTENT_LENGTH) {
      console.log('‚ö†Ô∏è Content too long, truncating to avoid rate limit');
      truncatedContent = fileContent.substring(0, MAX_CONTENT_LENGTH) + '\n\n[Content truncated to avoid rate limit]';
      console.log('üìÑ Truncated content length:', truncatedContent.length);
    }
    
    console.log('üìä Processing progress: 100%');
    console.log('‚úÖ File content processed successfully');
    
    // G·ªçi OpenAI API v·ªõi text content
    const response = await client.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [
        {
          role: 'system',
          content: selectedRole 
            ? createSpecificRolePrompt(selectedIndustry, selectedRole)
            : createAutoAnalysisPrompt()
        },
        {
          role: 'user',
          content: selectedRole 
            ? `H√£y ph√¢n t√≠ch CV sau cho v·ªã tr√≠ ${selectedRole?.name || 'chung'} trong ng√†nh ${selectedIndustry?.name || 't·ªïng qu√°t'} v√† ƒë∆∞a ra g√≥p √Ω chi ti·∫øt theo format JSON:\n\n${truncatedContent}`
            : `H√£y ƒë·ªçc CV sau v√† t·ª± ƒë·ªông g·ª£i √Ω c√°c vai tr√≤ ph√π h·ª£p nh·∫•t d·ª±a tr√™n kinh nghi·ªám v√† k·ªπ nƒÉng. ƒê∆∞a ra g√≥p √Ω chi ti·∫øt theo format JSON:\n\n${truncatedContent}`
        }
      ],
      max_tokens: 4000,
      temperature: 0.3
    });

    console.log('üì° API Response received');
    console.log('üì° Response data keys:', Object.keys(response));
    
    const aiResponse = response.choices[0].message.content;
    console.log('ü§ñ AI Response received, length:', aiResponse.length);
    
    // Parse JSON response t·ª´ AI s·ª≠ d·ª•ng h√†m parseAIResponse
    return parseAIResponse(aiResponse);
  } catch (error) {
    console.error('Error calling AI API:', error);
    console.error('Error details:', {
      message: error.message,
      status: error.status,
      response: error.response
    });
    
    // Enhanced error handling with specific error types
    if (error.status === 401) {
      throw new Error('API key kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh API key.');
    } else if (error.status === 429) {
      throw new Error('Rate limit exceeded. Vui l√≤ng th·ª≠ l·∫°i sau.');
    } else if (error.status === 413) {
      throw new Error('File qu√° l·ªõn. Vui l√≤ng ch·ªçn file nh·ªè h∆°n.');
    } else if (error.status === 400) {
      throw new Error('L·ªói API request. Vui l√≤ng ki·ªÉm tra file v√† th·ª≠ l·∫°i.');
    } else if (error.message.includes('network') || error.message.includes('fetch')) {
      throw new Error('L·ªói k·∫øt n·ªëi m·∫°ng. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet.');
    } else if (error.message.includes('timeout')) {
      throw new Error('Request timeout. Vui l√≤ng th·ª≠ l·∫°i.');
    } else {
      throw new Error(`L·ªói API: ${error.message}`);
    }
  }
};

// Helper function ƒë·ªÉ ƒë·ªçc n·ªôi dung file
const readFileContent = (file) => {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = (e) => {
      let content = e.target.result;
      console.log('üìÑ File content length:', content.length);
      console.log('üìÑ File content preview:', content.substring(0, 200) + '...');
      
      if (!content || content.trim().length === 0) {
        reject(new Error('File is empty or cannot be read'));
        return;
      }
      
      // Truncate content ƒë·ªÉ tr√°nh rate limit (gi·ªõi h·∫°n ~50,000 characters)
      const MAX_CONTENT_LENGTH = 50000;
      if (content.length > MAX_CONTENT_LENGTH) {
        console.log('‚ö†Ô∏è Content too long, truncating to avoid rate limit');
        content = content.substring(0, MAX_CONTENT_LENGTH) + '\n\n[Content truncated to avoid rate limit]';
        console.log('üìÑ Truncated content length:', content.length);
      }
      
      resolve(content);
    };
    reader.onerror = (e) => {
      console.error('‚ùå File read error:', e);
      reject(new Error('Cannot read file content'));
    };
    reader.readAsText(file);
  });
};

// Helper function ƒë·ªÉ parse response t·ª´ AI
const parseAIResponse = (aiResponse) => {
  console.log('ü§ñ AI Response length:', aiResponse.length);
  console.log('ü§ñ AI Response preview:', aiResponse.substring(0, 300) + '...');
  
  try {
    // T√¨m JSON trong response - c·∫£i thi·ªán regex ƒë·ªÉ t√¨m JSON t·ªët h∆°n
    const jsonMatch = aiResponse.match(/\{[\s\S]*\}/);
    if (jsonMatch) {
      const jsonStr = jsonMatch[0];
      console.log('üìã Found JSON, length:', jsonStr.length);
      
      const parsedData = JSON.parse(jsonStr);
      console.log('‚úÖ JSON parsed successfully');
      console.log('üìä Parsed data overview:', {
        overallScore: parsedData.overallScore,
        scoresCount: parsedData.scores?.length || 0,
        strengthsCount: parsedData.strengths?.length || 0,
        improvementsCount: parsedData.improvements?.length || 0
      });
      
      // Validate v√† clean data v·ªõi ki·ªÉm tra k·ªπ h∆°n
      const cleanedData = {
        overallScore: Math.max(0, Math.min(100, parsedData.overallScore || 0)),
        scores: Array.isArray(parsedData.scores) ? parsedData.scores.map(score => ({
          category: score.category || "Kh√¥ng x√°c ƒë·ªãnh",
          value: Math.max(0, Math.min(100, score.value || 0)),
          description: score.description || "Kh√¥ng c√≥ m√¥ t·∫£"
        })) : [],
        strengths: Array.isArray(parsedData.strengths) ? parsedData.strengths.map(strength => ({
          title: strength.title || "ƒêi·ªÉm m·∫°nh",
          description: strength.description || "Kh√¥ng c√≥ m√¥ t·∫£"
        })) : [],
        improvements: Array.isArray(parsedData.improvements) ? parsedData.improvements.map(improvement => ({
          title: improvement.title || "C·∫ßn c·∫£i thi·ªán",
          description: improvement.description || "Kh√¥ng c√≥ m√¥ t·∫£",
          suggestion: improvement.suggestion || "Kh√¥ng c√≥ g·ª£i √Ω"
        })) : [],
        detailedAnalysis: parsedData.detailedAnalysis || "Ph√¢n t√≠ch chi ti·∫øt kh√¥ng kh·∫£ d·ª•ng",
        recommendations: Array.isArray(parsedData.recommendations) ? parsedData.recommendations.map(rec => ({
          title: rec.title || "Khuy·∫øn ngh·ªã",
          description: rec.description || "Kh√¥ng c√≥ m√¥ t·∫£"
        })) : [],
        certifications: Array.isArray(parsedData.certifications) ? parsedData.certifications.map(cert => ({
          name: cert.name || "Ch·ª©ng ch·ªâ",
          description: cert.description || "Kh√¥ng c√≥ m√¥ t·∫£",
          priority: cert.priority || "medium"
        })) : [],
        activities: Array.isArray(parsedData.activities) ? parsedData.activities.map(activity => ({
          name: activity.name || "Ho·∫°t ƒë·ªông",
          description: activity.description || "Kh√¥ng c√≥ m√¥ t·∫£",
          type: activity.type || "online"
        })) : [],
        missingSkills: Array.isArray(parsedData.missingSkills) ? parsedData.missingSkills.map(skill => ({
          skill: skill.skill || "K·ªπ nƒÉng",
          description: skill.description || "Kh√¥ng c√≥ m√¥ t·∫£",
          importance: skill.importance || "medium"
        })) : [],
        suggestedRoles: Array.isArray(parsedData.suggestedRoles) ? parsedData.suggestedRoles : [],
        topMatch: parsedData.topMatch || null,
        analysisSummary: parsedData.analysisSummary || "",
        expertLevel: parsedData.expertLevel || "entry",
        industryFit: parsedData.industryFit || "ph√π h·ª£p m·ªôt ph·∫ßn"
      };
      
      console.log('‚úÖ Data cleaned and validated successfully');
      console.log('üìä Final cleaned data:', {
        overallScore: cleanedData.overallScore,
        scoresCount: cleanedData.scores.length,
        strengthsCount: cleanedData.strengths.length,
        improvementsCount: cleanedData.improvements.length
      });
      
      // Ki·ªÉm tra n·∫øu t·∫•t c·∫£ ƒëi·ªÉm ƒë·ªÅu 0
      if (cleanedData.overallScore === 0 && cleanedData.scores.every(score => score.value === 0)) {
        console.warn('‚ö†Ô∏è All scores are 0 - AI might not have read CV content properly');
        console.log('üîç AI Response preview:', aiResponse.substring(0, 500));
      }
      
      return cleanedData;
    } else {
      console.log('‚ö†Ô∏è No JSON found in AI response');
      // N·∫øu kh√¥ng t√¨m th·∫•y JSON, tr·∫£ v·ªÅ fallback response v·ªõi mock data
      return {
        overallScore: 0,
        scores: [
          { category: "C·∫•u tr√∫c", value: 0, description: "Kh√¥ng th·ªÉ ƒë√°nh gi√°" },
          { category: "N·ªôi dung", value: 0, description: "Kh√¥ng th·ªÉ ƒë√°nh gi√°" },
          { category: "ƒê·ªãnh d·∫°ng", value: 0, description: "Kh√¥ng th·ªÉ ƒë√°nh gi√°" },
          { category: "Chuy√™n nghi·ªáp", value: 0, description: "Kh√¥ng th·ªÉ ƒë√°nh gi√°" }
        ],
        strengths: [
          { title: "Kh√¥ng th·ªÉ ph√¢n t√≠ch", description: "AI kh√¥ng th·ªÉ ƒë·ªçc ƒë∆∞·ª£c n·ªôi dung CV" }
        ],
        improvements: [
          { title: "Ki·ªÉm tra file", description: "ƒê·∫£m b·∫£o file CV c√≥ n·ªôi dung text r√µ r√†ng", suggestion: "Th·ª≠ v·ªõi file .txt format" }
        ],
        detailedAnalysis: "Kh√¥ng th·ªÉ ph√¢n t√≠ch chi ti·∫øt do n·ªôi dung CV kh√¥ng th·ªÉ ƒë·ªçc ƒë∆∞·ª£c. Vui l√≤ng th·ª≠ l·∫°i v·ªõi file CV kh√°c ho·∫∑c ki·ªÉm tra ƒë·ªãnh d·∫°ng file.",
        recommendations: [
          { title: "Ki·ªÉm tra file", description: "ƒê·∫£m b·∫£o file CV c√≥ n·ªôi dung text" },
          { title: "Th·ª≠ format kh√°c", description: "Chuy·ªÉn ƒë·ªïi sang .txt format" }
        ],
        certifications: [],
        activities: [],
        missingSkills: [],
        suggestedRoles: [],
        topMatch: null,
        analysisSummary: "L·ªói ph√¢n t√≠ch: AI kh√¥ng th·ªÉ ƒë·ªçc ƒë∆∞·ª£c n·ªôi dung CV. Vui l√≤ng ki·ªÉm tra file v√† th·ª≠ l·∫°i.",
        expertLevel: "entry",
        industryFit: "kh√¥ng x√°c ƒë·ªãnh"
      };
    }
  } catch (error) {
    console.error('‚ùå Error parsing AI response:', error);
    // Fallback n·∫øu parse l·ªói v·ªõi mock data
    return {
      overallScore: 0,
      scores: [
        { category: "C·∫•u tr√∫c", value: 0, description: "L·ªói ph√¢n t√≠ch" },
        { category: "N·ªôi dung", value: 0, description: "L·ªói ph√¢n t√≠ch" },
        { category: "ƒê·ªãnh d·∫°ng", value: 0, description: "L·ªói ph√¢n t√≠ch" },
        { category: "Chuy√™n nghi·ªáp", value: 0, description: "L·ªói ph√¢n t√≠ch" }
      ],
      strengths: [
        { title: "L·ªói ph√¢n t√≠ch", description: "Kh√¥ng th·ªÉ x·ª≠ l√Ω ph·∫£n h·ªìi t·ª´ AI" }
      ],
      improvements: [
        { title: "Th·ª≠ l·∫°i", description: "Vui l√≤ng th·ª≠ l·∫°i v·ªõi file CV kh√°c", suggestion: "Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng v√† th·ª≠ l·∫°i" }
      ],
      detailedAnalysis: "L·ªói ph√¢n t√≠ch: Kh√¥ng th·ªÉ x·ª≠ l√Ω ph·∫£n h·ªìi t·ª´ AI. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.",
      recommendations: [
        { title: "Ki·ªÉm tra k·∫øt n·ªëi", description: "ƒê·∫£m b·∫£o k·∫øt n·ªëi m·∫°ng ·ªïn ƒë·ªãnh" },
        { title: "Th·ª≠ l·∫°i", description: "Th·ª≠ l·∫°i v·ªõi file CV kh√°c" }
      ],
      certifications: [],
      activities: [],
      missingSkills: [],
      suggestedRoles: [],
      topMatch: null,
      analysisSummary: "L·ªói ph√¢n t√≠ch: Kh√¥ng th·ªÉ parse JSON response. Vui l√≤ng th·ª≠ l·∫°i.",
      expertLevel: "entry",
      industryFit: "kh√¥ng x√°c ƒë·ªãnh"
    };
  }
};

// H√†m t·∫°o ph√¢n t√≠ch theo chuy√™n ng√†nh
const generateIndustrySpecificAnalysis = (selectedIndustry, selectedRole) => {
  if (!selectedIndustry || !selectedRole) {
    return {};
  }

  const industryData = {
    tech: {
      certifications: [
        { name: "AWS Certified Solutions Architect", description: "Ch·ª©ng ch·ªâ ki·∫øn tr√∫c gi·∫£i ph√°p AWS", priority: "high" },
        { name: "Google Cloud Professional", description: "Ch·ª©ng ch·ªâ chuy√™n nghi·ªáp Google Cloud", priority: "high" },
        { name: "Microsoft Azure Fundamentals", description: "Ch·ª©ng ch·ªâ c∆° b·∫£n Azure", priority: "medium" },
        { name: "Certified Kubernetes Administrator", description: "Ch·ª©ng ch·ªâ qu·∫£n tr·ªã Kubernetes", priority: "high" },
        { name: "PMP Certification", description: "Ch·ª©ng ch·ªâ qu·∫£n l√Ω d·ª± √°n chuy√™n nghi·ªáp", priority: "medium" }
      ],
      activities: [
        { name: "Hackathon tham gia", description: "Tham gia c√°c cu·ªôc thi l·∫≠p tr√¨nh", type: "offline" },
        { name: "Open Source Contribution", description: "ƒê√≥ng g√≥p v√†o c√°c d·ª± √°n m√£ ngu·ªìn m·ªü", type: "online" },
        { name: "Tech Meetup", description: "Tham gia c√°c bu·ªïi g·∫∑p m·∫∑t c√¥ng ngh·ªá", type: "offline" },
        { name: "Online Coding Bootcamp", description: "Kh√≥a h·ªçc l·∫≠p tr√¨nh tr·ª±c tuy·∫øn", type: "online" }
      ],
      missingSkills: [
        { skill: "Cloud Computing", description: "K·ªπ nƒÉng ƒëi·ªán to√°n ƒë√°m m√¢y", importance: "high" },
        { skill: "DevOps", description: "K·ªπ nƒÉng DevOps v√† CI/CD", importance: "high" },
        { skill: "Microservices", description: "Ki·∫øn tr√∫c microservices", importance: "medium" },
        { skill: "Security", description: "B·∫£o m·∫≠t ·ª©ng d·ª•ng", importance: "high" }
      ]
    },
    design: {
      certifications: [
        { name: "Adobe Certified Expert", description: "Ch·ª©ng ch·ªâ chuy√™n gia Adobe", priority: "high" },
        { name: "Google UX Design Certificate", description: "Ch·ª©ng ch·ªâ thi·∫øt k·∫ø UX Google", priority: "high" },
        { name: "Figma Master", description: "Ch·ª©ng ch·ªâ th√†nh th·∫°o Figma", priority: "medium" },
        { name: "Design Thinking", description: "T∆∞ duy thi·∫øt k·∫ø", priority: "medium" }
      ],
      activities: [
        { name: "Design Portfolio Review", description: "ƒê√°nh gi√° portfolio thi·∫øt k·∫ø", type: "online" },
        { name: "Design Workshop", description: "Workshop thi·∫øt k·∫ø", type: "offline" },
        { name: "Creative Challenge", description: "Th·ª≠ th√°ch s√°ng t·∫°o", type: "online" }
      ],
      missingSkills: [
        { skill: "User Research", description: "Nghi√™n c·ª©u ng∆∞·ªùi d√πng", importance: "high" },
        { skill: "Prototyping", description: "T·∫°o m·∫´u th·ª≠ nghi·ªám", importance: "high" },
        { skill: "Accessibility", description: "Thi·∫øt k·∫ø ti·∫øp c·∫≠n", importance: "medium" }
      ]
    },
    finance: {
      certifications: [
        { name: "CFA (Chartered Financial Analyst)", description: "Chuy√™n gia ph√¢n t√≠ch t√†i ch√≠nh", priority: "high" },
        { name: "CPA (Certified Public Accountant)", description: "K·∫ø to√°n c√¥ng ch·ª©ng", priority: "high" },
        { name: "FRM (Financial Risk Manager)", description: "Qu·∫£n l√Ω r·ªßi ro t√†i ch√≠nh", priority: "medium" },
        { name: "Excel Advanced", description: "Excel n√¢ng cao", priority: "medium" }
      ],
      activities: [
        { name: "Financial Modeling Course", description: "Kh√≥a h·ªçc m√¥ h√¨nh t√†i ch√≠nh", type: "online" },
        { name: "Investment Club", description: "C√¢u l·∫°c b·ªô ƒë·∫ßu t∆∞", type: "offline" },
        { name: "Financial Analysis Workshop", description: "Workshop ph√¢n t√≠ch t√†i ch√≠nh", type: "offline" }
      ],
      missingSkills: [
        { skill: "Financial Modeling", description: "M√¥ h√¨nh t√†i ch√≠nh", importance: "high" },
        { skill: "Risk Management", description: "Qu·∫£n l√Ω r·ªßi ro", importance: "high" },
        { skill: "Data Analysis", description: "Ph√¢n t√≠ch d·ªØ li·ªáu", importance: "medium" }
      ]
    }
  };

  const industryInfo = industryData[selectedIndustry.id] || industryData.tech;
  
  return {
    certifications: industryInfo.certifications,
    activities: industryInfo.activities,
    missingSkills: industryInfo.missingSkills,
    expertLevel: selectedRole.level,
    industryFit: "ph√π h·ª£p m·ªôt ph·∫ßn"
  };
};

// H√†m t·∫°o prompt cho ph√¢n t√≠ch vai tr√≤ c·ª• th·ªÉ
const createSpecificRolePrompt = (selectedIndustry, selectedRole) => {
  return `B·∫°n l√† chuy√™n gia HR. Ph√¢n t√≠ch CV cho v·ªã tr√≠ ${selectedRole?.name || 'chung'} trong ng√†nh ${selectedIndustry?.name || 't·ªïng qu√°t'}.

QUAN TR·ªåNG: CH·ªà tr·∫£ v·ªÅ JSON, kh√¥ng th√™m text kh√°c.

ƒê·ªäNH D·∫†NG JSON B·∫ÆT BU·ªòC:
{
  "overallScore": 85,
  "scores": [
    {"category": "C·∫•u tr√∫c", "value": 20, "description": "CV c√≥ c·∫•u tr√∫c r√µ r√†ng"},
    {"category": "N·ªôi dung", "value": 25, "description": "N·ªôi dung ƒë·∫ßy ƒë·ªß th√¥ng tin"},
    {"category": "ƒê·ªãnh d·∫°ng", "value": 18, "description": "ƒê·ªãnh d·∫°ng chuy√™n nghi·ªáp"},
    {"category": "Chuy√™n nghi·ªáp", "value": 15, "description": "Th·ªÉ hi·ªán t√≠nh chuy√™n nghi·ªáp"},
    {"category": "K·ªπ nƒÉng chuy√™n ng√†nh", "value": 7, "description": "K·ªπ nƒÉng ph√π h·ª£p v·ªõi ${selectedRole?.name}"}
  ],
  "strengths": [
    {"title": "Th√¥ng tin li√™n h·ªá r√µ r√†ng", "description": "CV c√≥ ƒë·∫ßy ƒë·ªß th√¥ng tin li√™n h·ªá"},
    {"title": "Kinh nghi·ªám ƒë∆∞·ª£c m√¥ t·∫£ chi ti·∫øt", "description": "C√°c v·ªã tr√≠ c√¥ng vi·ªác ƒë∆∞·ª£c m√¥ t·∫£ v·ªõi th√†nh t√≠ch c·ª• th·ªÉ"}
  ],
  "improvements": [
    {"title": "Thi·∫øu t·ª´ kh√≥a quan tr·ªçng", "description": "CV c·∫ßn b·ªï sung th√™m t·ª´ kh√≥a li√™n quan ƒë·∫øn v·ªã tr√≠ ${selectedRole?.name}", "suggestion": "Nghi√™n c·ª©u job description v√† th√™m c√°c t·ª´ kh√≥a ph√π h·ª£p"}
  ],
  "detailedAnalysis": "CV c·ªßa b·∫°n th·ªÉ hi·ªán m·ªôt h·ªì s∆° chuy√™n nghi·ªáp v·ªõi kinh nghi·ªám l√†m vi·ªác ƒëa d·∫°ng. Tuy nhi√™n, c√≥ m·ªôt s·ªë ƒëi·ªÉm c·∫ßn c·∫£i thi·ªán ƒë·ªÉ t·ªëi ∆∞u h√≥a c∆° h·ªôi ƒë∆∞·ª£c tuy·ªÉn d·ª•ng cho v·ªã tr√≠ ${selectedRole?.name}.",
  "recommendations": [
    {"title": "B·ªï sung t·ª´ kh√≥a k·ªπ thu·∫≠t", "description": "Th√™m c√°c t·ª´ kh√≥a k·ªπ thu·∫≠t li√™n quan ƒë·∫øn v·ªã tr√≠ ${selectedRole?.name}"}
  ],
  "certifications": [
    {"name": "Ch·ª©ng ch·ªâ ${selectedRole?.name}", "description": "Ch·ª©ng ch·ªâ chuy√™n m√¥n ph√π h·ª£p v·ªõi v·ªã tr√≠", "priority": "high"}
  ],
  "activities": [
    {"name": "Tham gia workshop ${selectedRole?.name}", "description": "Ho·∫°t ƒë·ªông n√¢ng cao k·ªπ nƒÉng chuy√™n m√¥n", "type": "workshop"}
  ],
  "missingSkills": [
    {"skill": "K·ªπ nƒÉng chuy√™n m√¥n cho ${selectedRole?.name}", "description": "K·ªπ nƒÉng c·∫ßn b·ªï sung cho v·ªã tr√≠", "importance": "high"}
  ],
  "expertLevel": "senior",
  "industryFit": "ph√π h·ª£p"
}

CH·ªà tr·∫£ v·ªÅ JSON, kh√¥ng th√™m text kh√°c.`;
};

// H√†m t·∫°o prompt cho ph√¢n t√≠ch t·ª± ƒë·ªông
const createAutoAnalysisPrompt = () => {
  return `B·∫°n l√† chuy√™n gia HR v·ªõi 15 nƒÉm kinh nghi·ªám. Ph√¢n t√≠ch CV v√† tr·∫£ v·ªÅ JSON format.

QUAN TR·ªåNG: 
- CH·ªà tr·∫£ v·ªÅ JSON, kh√¥ng th√™m text kh√°c
- Ph√¢n t√≠ch d·ª±a tr√™n n·ªôi dung CV th·ª±c t·∫ø
- ƒêi·ªÉm s·ªë ph·∫£i ch√≠nh x√°c (kh√¥ng ƒë∆∞·ª£c 0 n·∫øu CV c√≥ n·ªôi dung)
- ƒê∆∞a ra g·ª£i √Ω vai tr√≤ ph√π h·ª£p d·ª±a tr√™n k·ªπ nƒÉng trong CV

ƒê·ªäNH D·∫†NG JSON B·∫ÆT BU·ªòC:
{
  "overallScore": 85,
  "scores": [
    {"category": "C·∫•u tr√∫c", "value": 20, "description": "CV c√≥ c·∫•u tr√∫c r√µ r√†ng"},
    {"category": "N·ªôi dung", "value": 25, "description": "N·ªôi dung ƒë·∫ßy ƒë·ªß th√¥ng tin"},
    {"category": "ƒê·ªãnh d·∫°ng", "value": 18, "description": "ƒê·ªãnh d·∫°ng chuy√™n nghi·ªáp"},
    {"category": "Chuy√™n nghi·ªáp", "value": 15, "description": "Th·ªÉ hi·ªán t√≠nh chuy√™n nghi·ªáp"},
    {"category": "K·ªπ nƒÉng chuy√™n ng√†nh", "value": 7, "description": "K·ªπ nƒÉng ph√π h·ª£p"}
  ],
  "strengths": [
    {"title": "Th√¥ng tin li√™n h·ªá r√µ r√†ng", "description": "CV c√≥ ƒë·∫ßy ƒë·ªß th√¥ng tin li√™n h·ªá"},
    {"title": "Kinh nghi·ªám ƒë∆∞·ª£c m√¥ t·∫£ chi ti·∫øt", "description": "C√°c v·ªã tr√≠ c√¥ng vi·ªác ƒë∆∞·ª£c m√¥ t·∫£ v·ªõi th√†nh t√≠ch c·ª• th·ªÉ"}
  ],
  "improvements": [
    {"title": "Thi·∫øu t·ª´ kh√≥a quan tr·ªçng", "description": "CV c·∫ßn b·ªï sung th√™m t·ª´ kh√≥a li√™n quan ƒë·∫øn v·ªã tr√≠ ·ª©ng tuy·ªÉn", "suggestion": "Nghi√™n c·ª©u job description v√† th√™m c√°c t·ª´ kh√≥a ph√π h·ª£p"}
  ],
  "detailedAnalysis": "CV c·ªßa b·∫°n th·ªÉ hi·ªán m·ªôt h·ªì s∆° chuy√™n nghi·ªáp v·ªõi kinh nghi·ªám l√†m vi·ªác ƒëa d·∫°ng. Tuy nhi√™n, c√≥ m·ªôt s·ªë ƒëi·ªÉm c·∫ßn c·∫£i thi·ªán ƒë·ªÉ t·ªëi ∆∞u h√≥a c∆° h·ªôi ƒë∆∞·ª£c tuy·ªÉn d·ª•ng.",
  "recommendations": [
    {"title": "B·ªï sung t·ª´ kh√≥a k·ªπ thu·∫≠t", "description": "Th√™m c√°c t·ª´ kh√≥a k·ªπ thu·∫≠t li√™n quan ƒë·∫øn v·ªã tr√≠ ·ª©ng tuy·ªÉn"}
  ],
  "suggestedRoles": [
    {
      "industry": "C√¥ng ngh·ªá th√¥ng tin",
      "roles": [
        {"name": "Frontend Developer", "match": 85, "reason": "C√≥ kinh nghi·ªám v·ªõi React v√† JavaScript", "level": "senior"},
        {"name": "Full Stack Developer", "match": 78, "reason": "C√≥ k·ªπ nƒÉng c·∫£ frontend v√† backend", "level": "senior"}
      ]
    }
  ],
  "topMatch": {"name": "Frontend Developer", "match": 85, "reason": "Ph√π h·ª£p nh·∫•t v·ªõi kinh nghi·ªám hi·ªán t·∫°i", "level": "senior"},
  "analysisSummary": "CV th·ªÉ hi·ªán h·ªì s∆° chuy√™n nghi·ªáp v·ªõi ti·ªÅm nƒÉng ph√°t tri·ªÉn t·ªët trong lƒ©nh v·ª±c c√¥ng ngh·ªá th√¥ng tin."
}

CH·ªà tr·∫£ v·ªÅ JSON, kh√¥ng th√™m text kh√°c.`;
};

// H√†m t·∫°o g·ª£i √Ω vai tr√≤ d·ª±a tr√™n CV
const generateRoleSuggestions = () => {
  const roleSuggestions = [
    {
      industry: "C√¥ng ngh·ªá th√¥ng tin",
      roles: [
        {
          name: "Frontend Developer",
          match: 85,
          reason: "CV c√≥ kinh nghi·ªám v·ªõi React, JavaScript v√† UI/UX",
          level: "senior"
        },
        {
          name: "Full Stack Developer", 
          match: 78,
          reason: "C√≥ k·ªπ nƒÉng c·∫£ frontend v√† backend, ph√π h·ª£p v·ªõi v·ªã tr√≠ full-stack",
          level: "senior"
        },
        {
          name: "DevOps Engineer",
          match: 65,
          reason: "C√≥ kinh nghi·ªám v·ªõi Docker v√† CI/CD, c·∫ßn b·ªï sung th√™m k·ªπ nƒÉng cloud",
          level: "entry"
        }
      ]
    },
    {
      industry: "Thi·∫øt k·∫ø & S√°ng t·∫°o",
      roles: [
        {
          name: "UI/UX Designer",
          match: 82,
          reason: "C√≥ portfolio thi·∫øt k·∫ø ƒë·∫πp v√† kinh nghi·ªám v·ªõi Figma",
          level: "senior"
        },
        {
          name: "Product Designer",
          match: 75,
          reason: "Hi·ªÉu v·ªÅ user research v√† c√≥ t∆∞ duy s·∫£n ph·∫©m",
          level: "senior"
        }
      ]
    },
    {
      industry: "Kinh doanh & Qu·∫£n l√Ω",
      roles: [
        {
          name: "Business Analyst",
          match: 80,
          reason: "C√≥ kinh nghi·ªám ph√¢n t√≠ch d·ªØ li·ªáu v√† k·ªπ nƒÉng giao ti·∫øp t·ªët",
          level: "senior"
        },
        {
          name: "Project Manager",
          match: 70,
          reason: "C√≥ kinh nghi·ªám qu·∫£n l√Ω team v√† d·ª± √°n",
          level: "senior"
        }
      ]
    }
  ];

  return {
    suggestedRoles: roleSuggestions,
    topMatch: roleSuggestions[0].roles[0],
    analysisSummary: "D·ª±a tr√™n kinh nghi·ªám v√† k·ªπ nƒÉng trong CV, ch√∫ng t√¥i g·ª£i √Ω c√°c vai tr√≤ ph√π h·ª£p nh·∫•t"
  };
};

// Utility functions
export const clearCache = () => {
  responseCache.clear();
  console.log('üóëÔ∏è Cache cleared');
};

export const getCacheSize = () => {
  return responseCache.size;
};

export const getSupportedFileTypes = () => {
  return SUPPORTED_FILE_TYPES;
};

export const getMaxFileSize = () => {
  return MAX_FILE_SIZE;
};

// Health check function
export const checkAIServiceHealth = async () => {
  const apiKey = process.env.REACT_APP_OPENAI_API_KEY;
  
  if (!apiKey || apiKey === 'your_openai_api_key_here') {
    return { status: 'error', message: 'API key not configured' };
  }
  
  try {
    const { default: OpenAI } = await import('openai');
    const client = new OpenAI({
      apiKey: apiKey,
      dangerouslyAllowBrowser: true
    });
    
    // Simple test call
    await client.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [{ role: 'user', content: 'Hello' }],
      max_tokens: 10
    });
    
    return { status: 'healthy', message: 'AI service is working' };
  } catch (error) {
    return { status: 'error', message: error.message };
  }
};
